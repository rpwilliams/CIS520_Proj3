		           +---------------------------+
       	           |         CIS 520           |
		           | PROJECT 3: Virtual Memory |
		           |     DESIGN DOCUMENT       |
		           +---------------------------+

---- GROUP ----

>> Fill in the names of your group members.

	Ryan Williams
	Matt Hixon
	Mark Spicer

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

	https://github.com/ChristianJHughes/pintos-project3/
	http://people.cs.ksu.edu/~bstinson/courses/cis520/grandepintos.proj3
	http://courses.cs.vt.edu/~cs3204/fall2009/pintos-vt-local/Project3Session.pdf
	https://en.wikipedia.org/wiki/Page_replacement_algorithm#Least_recently_used
	http://www.informit.com/articles/article.aspx?p=25260&seqNum=7


			PAGE TABLE MANAGEMENT
			=====================

---- ALGORITHMS ----

>> A1: In a few paragraphs, describe the existing code for locating the
>> frame, if any, that contains the data of a given page.

	Each frame is mapped to a given page with the "page" variable, which is a pointer to the page associated
	with the frame. Additionally, each frame contains a pointer to its data with the "base" variable,
	which is a pointer that points to the data via a kernel virtual base address.

	In the try_frame_alloc_and_lock function in frame.c, a frame that
	does not contain a mapping to an existing page is searched for in the array of frames.
	If a free frame is found (which is indicated by a frame's "page" variable being NULL), that frame's page
	is assigned to the to the page passed in. If a free frame is not found (which is indicated by no frame in the frame array having a page set to null), then a frame from the frame array must be evicted, which is described in further detail in question B1. 

	If a page to frame mapping cannot be created even after an attempt at a frame eviction, try_frame_alloc_and_alloc
	is attempted a total of 3 times in frame_alloc_and_lock.


---- SYNCHRONIZATION ----

>> A2: When two user processes both need a new frame at the same time,
>> how are races avoided?

	Races are avoided with a lock given to each frame. Before assigning f->page to 
	the page passed into try_frame_alloc_and_lock, the lock is acquired, and
	f->page = page becomes part of the critical section, which ensures synchronization.

		       PAGING TO AND FROM DISK
		       =======================

---- ALGORITHMS ----

>> B1: When a frame is required but none is free, some frame must be
>> evicted.  Describe the algorithm used to choose a frame to evict.

	The LRU algorithm is used to evict a frame in try_frame_alloc_and_lock if 
	there are no free frames available. We iterate through the list of frames 
	twice, and we do so by using "hand" to keep track of our position in the
	list.

	For each frame, we check if the page was accessed recently. If it was,
	that means it has been used recently, so we should continue searching for the
	least recently used frame. If the frame was *not* accessed recently, we have
	found the frame to evict, and we evict it by calling page_out. If we are unable
	to evict the frame with page_out, we return NULL to indicate we were unsuccesful. 
	If we are succesful, f->page becomes available, and is set to the page passed in,
	making it so the page is finally mapped to a frame.


>> B2: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

	First, we check if a user program exceeds the size of the stack when a
	page fault occurs. We get the stack's size by getting the difference of 
	PHYS_BASE and STACK_MAX, since the stack grows downward from PHYS_BASE. If
	the size is exceeded, we grow the stack by allocating a new page with page_allocate.

	Additionally, before growing the stack, we ensure that 
	the user stack pointer is "right below" the stack.
	We do this by ensuring the fault address is within 32 bytes of the stack pointer,
	since the PUSHA instruction pushes 32 bytes at once.

	

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
